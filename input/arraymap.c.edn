(["TranslationUnit"] (["FunctionDefinition"] (["SimpleDeclSpecifier"]) (["FunctionDeclarator"] (["Name" "bpf_array_free_percpu"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_array"])) (["Declarator"] (["Pointer"]) (["Name" "array"])))) (["CompoundStatement"] (["DeclarationStatement"] (["SimpleDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Name" "i"])))) (["ForStatement"] (["ExpressionStatement"] (["BinaryExpression" "int" :assign] (["IdExpression" "int"] (["Name" "i"])) (["LiteralExpression" "int"]))) (["BinaryExpression" "problem-type" :lessThan] (["IdExpression" "int"] (["Name" "i"])) (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "bpf_array *"] (["Name" "array"])) (["Name" "map"])) (["Name" "max_entries"]))) (["UnaryExpression" "int" :postFixIncr] (["IdExpression" "int"] (["Name" "i"]))) (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "free_percpu"])) (["ArraySubscriptExpression" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "bpf_array *"] (["Name" "array"])) (["Name" "pptrs"])) (["IdExpression" "int"] (["Name" "i"])))))))) (["FunctionDefinition"] (["SimpleDeclSpecifier"]) (["FunctionDeclarator"] (["Name" "bpf_array_alloc_percpu"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_array"])) (["Declarator"] (["Pointer"]) (["Name" "array"])))) (["CompoundStatement"] (["DeclarationStatement"] (["SimpleDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Name" "__percpu"])))) (["ProblemStatement"] (["Problem"])) (["ExpressionStatement"] (["UnaryExpression" "problem-type" :star] (["IdExpression" "problem-type"] (["Name" "ptr"])))) (["DeclarationStatement"] (["SimpleDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Name" "i"])))) (["ForStatement"] (["ExpressionStatement"] (["BinaryExpression" "int" :assign] (["IdExpression" "int"] (["Name" "i"])) (["LiteralExpression" "int"]))) (["BinaryExpression" "problem-type" :lessThan] (["IdExpression" "int"] (["Name" "i"])) (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "bpf_array *"] (["Name" "array"])) (["Name" "map"])) (["Name" "max_entries"]))) (["UnaryExpression" "int" :postFixIncr] (["IdExpression" "int"] (["Name" "i"]))) (["CompoundStatement"] (["ExpressionStatement"] (["BinaryExpression" "problem-type" :assign] (["IdExpression" "problem-type"] (["Name" "ptr"])) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "__alloc_percpu_gfp"])) (["FieldReference" "problem-type"] (["IdExpression" "bpf_array *"] (["Name" "array"])) (["Name" "elem_size"])) (["LiteralExpression" "int"]) (["BinaryExpression" "problem-type" :binaryOr] (["IdExpression" "problem-type"] (["Name" "GFP_USER"])) (["IdExpression" "problem-type"] (["Name" "__GFP_NOWARN"])))))) (["IfStatement"] (["UnaryExpression" "bool" :not] (["IdExpression" "problem-type"] (["Name" "ptr"]))) (["CompoundStatement"] (["ExpressionStatement"] (["FunctionCallExpression" "void"] (["IdExpression" "void (bpf_array *)"] (["Name" "bpf_array_free_percpu"])) (["IdExpression" "bpf_array *"] (["Name" "array"])))) (["ReturnStatement"] (["UnaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "ENOMEM"])))))) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :assign] (["ArraySubscriptExpression" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "bpf_array *"] (["Name" "array"])) (["Name" "pptrs"])) (["IdExpression" "int"] (["Name" "i"]))) (["IdExpression" "problem-type"] (["Name" "ptr"])))))) (["ReturnStatement"] (["LiteralExpression" "int"])))) (["FunctionDefinition"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map"])) (["FunctionDeclarator"] (["Pointer"]) (["Name" "array_map_alloc"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_attr"])) (["Declarator"] (["Pointer"]) (["Name" "attr"])))) (["CompoundStatement"] (["DeclarationStatement"] (["SimpleDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Name" "percpu"]) (["EqualsInitializer"] (["BinaryExpression" "problem-type" :equals] (["FieldReference" "problem-type"] (["IdExpression" "bpf_attr *"] (["Name" "attr"])) (["Name" "map_type"])) (["IdExpression" "problem-type"] (["Name" "BPF_MAP_TYPE_PERCPU_ARRAY"]))))))) (["DeclarationStatement"] (["SimpleDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Name" "numa_node"]) (["EqualsInitializer"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "bpf_map_attr_numa_node"])) (["IdExpression" "bpf_attr *"] (["Name" "attr"]))))))) (["DeclarationStatement"] (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_array"])) (["Declarator"] (["Pointer"]) (["Name" "array"])))) (["DeclarationStatement"] (["SimpleDeclaration"] (["NamedTypeSpecifier"] (["Name" "u64"])) (["Declarator"] (["Name" "array_size"])))) (["DeclarationStatement"] (["SimpleDeclaration"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["Declarator"] (["Name" "elem_size"])))) (["IfStatement"] (["BinaryExpression" "problem-type" :logicalOr] (["BinaryExpression" "problem-type" :logicalOr] (["BinaryExpression" "problem-type" :logicalOr] (["BinaryExpression" "problem-type" :logicalOr] (["BinaryExpression" "problem-type" :equals] (["FieldReference" "problem-type"] (["IdExpression" "bpf_attr *"] (["Name" "attr"])) (["Name" "max_entries"])) (["LiteralExpression" "int"])) (["BinaryExpression" "problem-type" :notequals] (["FieldReference" "problem-type"] (["IdExpression" "bpf_attr *"] (["Name" "attr"])) (["Name" "key_size"])) (["LiteralExpression" "int"]))) (["BinaryExpression" "problem-type" :equals] (["FieldReference" "problem-type"] (["IdExpression" "bpf_attr *"] (["Name" "attr"])) (["Name" "value_size"])) (["LiteralExpression" "int"]))) (["BinaryExpression" "problem-type" :binaryAnd] (["FieldReference" "problem-type"] (["IdExpression" "bpf_attr *"] (["Name" "attr"])) (["Name" "map_flags"])) (["UnaryExpression" "problem-type" :tilde] (["UnaryExpression" "problem-type" :bracketedPrimary] (["BinaryExpression" "problem-type" :binaryOr] (["BinaryExpression" "problem-type" :binaryOr] (["IdExpression" "problem-type"] (["Name" "BPF_F_NUMA_NODE"])) (["IdExpression" "problem-type"] (["Name" "BPF_F_RDONLY"]))) (["IdExpression" "problem-type"] (["Name" "BPF_F_WRONLY"]))))))) (["UnaryExpression" "problem-type" :bracketedPrimary] (["BinaryExpression" "problem-type" :logicalAnd] (["IdExpression" "bool"] (["Name" "percpu"])) (["BinaryExpression" "problem-type" :notequals] (["IdExpression" "int"] (["Name" "numa_node"])) (["IdExpression" "problem-type"] (["Name" "NUMA_NO_NODE"])))))) (["ReturnStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "ERR_PTR"])) (["UnaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "EINVAL"])))))) (["IfStatement"] (["BinaryExpression" "problem-type" :greaterThan] (["FieldReference" "problem-type"] (["IdExpression" "bpf_attr *"] (["Name" "attr"])) (["Name" "value_size"])) (["IdExpression" "problem-type"] (["Name" "KMALLOC_MAX_SIZE"]))) (["ReturnStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "ERR_PTR"])) (["UnaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "E2BIG"])))))) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :assign] (["IdExpression" "problem-type"] (["Name" "elem_size"])) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "round_up"])) (["FieldReference" "problem-type"] (["IdExpression" "bpf_attr *"] (["Name" "attr"])) (["Name" "value_size"])) (["LiteralExpression" "int"])))) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :assign] (["IdExpression" "problem-type"] (["Name" "array_size"])) (["UnaryExpression" "unsigned long int" :sizeof] (["UnaryExpression" "bpf_array" :bracketedPrimary] (["UnaryExpression" "bpf_array" :star] (["IdExpression" "bpf_array *"] (["Name" "array"]))))))) (["IfStatement"] (["IdExpression" "bool"] (["Name" "percpu"])) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :plusAssign] (["IdExpression" "problem-type"] (["Name" "array_size"])) (["BinaryExpression" "problem-type" :multiply] (["CastExpression" "problem-type"] (["TypeId"] (["NamedTypeSpecifier"] (["Name" "u64"])) (["Declarator"])) (["FieldReference" "problem-type"] (["IdExpression" "bpf_attr *"] (["Name" "attr"])) (["Name" "max_entries"]))) (["TypeIdExpression" "unsigned long int"] (["TypeId"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Pointer"]))))))) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :plusAssign] (["IdExpression" "problem-type"] (["Name" "array_size"])) (["BinaryExpression" "problem-type" :multiply] (["CastExpression" "problem-type"] (["TypeId"] (["NamedTypeSpecifier"] (["Name" "u64"])) (["Declarator"])) (["FieldReference" "problem-type"] (["IdExpression" "bpf_attr *"] (["Name" "attr"])) (["Name" "max_entries"]))) (["IdExpression" "problem-type"] (["Name" "elem_size"])))))) (["IfStatement"] (["BinaryExpression" "problem-type" :greaterEqual] (["IdExpression" "problem-type"] (["Name" "array_size"])) (["BinaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "U32_MAX"])) (["IdExpression" "problem-type"] (["Name" "PAGE_SIZE"])))) (["ReturnStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "ERR_PTR"])) (["UnaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "ENOMEM"])))))) (["ExpressionStatement"] (["BinaryExpression" "problem-binding" :assign] (["IdExpression" "bpf_array *"] (["Name" "array"])) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "bpf_map_area_alloc"])) (["IdExpression" "problem-type"] (["Name" "array_size"])) (["IdExpression" "int"] (["Name" "numa_node"]))))) (["IfStatement"] (["UnaryExpression" "bool" :not] (["IdExpression" "bpf_array *"] (["Name" "array"]))) (["ReturnStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "ERR_PTR"])) (["UnaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "ENOMEM"])))))) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :assign] (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "bpf_array *"] (["Name" "array"])) (["Name" "map"])) (["Name" "map_type"])) (["FieldReference" "problem-type"] (["IdExpression" "bpf_attr *"] (["Name" "attr"])) (["Name" "map_type"])))) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :assign] (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "bpf_array *"] (["Name" "array"])) (["Name" "map"])) (["Name" "key_size"])) (["FieldReference" "problem-type"] (["IdExpression" "bpf_attr *"] (["Name" "attr"])) (["Name" "key_size"])))) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :assign] (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "bpf_array *"] (["Name" "array"])) (["Name" "map"])) (["Name" "value_size"])) (["FieldReference" "problem-type"] (["IdExpression" "bpf_attr *"] (["Name" "attr"])) (["Name" "value_size"])))) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :assign] (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "bpf_array *"] (["Name" "array"])) (["Name" "map"])) (["Name" "max_entries"])) (["FieldReference" "problem-type"] (["IdExpression" "bpf_attr *"] (["Name" "attr"])) (["Name" "max_entries"])))) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :assign] (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "bpf_array *"] (["Name" "array"])) (["Name" "map"])) (["Name" "map_flags"])) (["FieldReference" "problem-type"] (["IdExpression" "bpf_attr *"] (["Name" "attr"])) (["Name" "map_flags"])))) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :assign] (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "bpf_array *"] (["Name" "array"])) (["Name" "map"])) (["Name" "numa_node"])) (["IdExpression" "int"] (["Name" "numa_node"])))) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :assign] (["FieldReference" "problem-type"] (["IdExpression" "bpf_array *"] (["Name" "array"])) (["Name" "elem_size"])) (["IdExpression" "problem-type"] (["Name" "elem_size"])))) (["IfStatement"] (["UnaryExpression" "bool" :not] (["IdExpression" "bool"] (["Name" "percpu"]))) (["GotoStatement"] (["Name" "out"]))) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :plusAssign] (["IdExpression" "problem-type"] (["Name" "array_size"])) (["BinaryExpression" "problem-type" :multiply] (["BinaryExpression" "problem-type" :multiply] (["CastExpression" "problem-type"] (["TypeId"] (["NamedTypeSpecifier"] (["Name" "u64"])) (["Declarator"])) (["FieldReference" "problem-type"] (["IdExpression" "bpf_attr *"] (["Name" "attr"])) (["Name" "max_entries"]))) (["IdExpression" "problem-type"] (["Name" "elem_size"]))) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "num_possible_cpus"])))))) (["IfStatement"] (["BinaryExpression" "problem-type" :logicalOr] (["BinaryExpression" "problem-type" :greaterEqual] (["IdExpression" "problem-type"] (["Name" "array_size"])) (["BinaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "U32_MAX"])) (["IdExpression" "problem-type"] (["Name" "PAGE_SIZE"])))) (["FunctionCallExpression" "int"] (["IdExpression" "int (bpf_array *)"] (["Name" "bpf_array_alloc_percpu"])) (["IdExpression" "bpf_array *"] (["Name" "array"])))) (["CompoundStatement"] (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "bpf_map_area_free"])) (["IdExpression" "bpf_array *"] (["Name" "array"])))) (["ReturnStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "ERR_PTR"])) (["UnaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "ENOMEM"]))))))) (["LabelStatement"] (["Name" "out"]) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :assign] (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "bpf_array *"] (["Name" "array"])) (["Name" "map"])) (["Name" "pages"])) (["BinaryExpression" "problem-binding" :shiftRight] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "round_up"])) (["IdExpression" "problem-type"] (["Name" "array_size"])) (["IdExpression" "problem-type"] (["Name" "PAGE_SIZE"]))) (["IdExpression" "problem-type"] (["Name" "PAGE_SHIFT"])))))) (["ReturnStatement"] (["UnaryExpression" "? *" :amper] (["FieldReference" "problem-type"] (["IdExpression" "bpf_array *"] (["Name" "array"])) (["Name" "map"])))))) (["FunctionDefinition"] (["SimpleDeclSpecifier"]) (["FunctionDeclarator"] (["Pointer"]) (["Name" "array_map_lookup_elem"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map"])) (["Declarator"] (["Pointer"]) (["Name" "map"]))) (["ParameterDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Pointer"]) (["Name" "key"])))) (["CompoundStatement"] (["DeclarationStatement"] (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_array"])))) (["ProblemStatement"] (["Problem"])) (["ProblemStatement"] (["Problem"])) (["DeclarationStatement"] (["SimpleDeclaration"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["Declarator"] (["Name" "index"]) (["EqualsInitializer"] (["UnaryExpression" "problem-type" :star] (["CastExpression" "? *"] (["TypeId"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["Declarator"] (["Pointer"]))) (["IdExpression" "void *"] (["Name" "key"])))))))) (["IfStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "unlikely"])) (["BinaryExpression" "problem-type" :greaterEqual] (["IdExpression" "problem-type"] (["Name" "index"])) (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "problem-type"] (["Name" "array"])) (["Name" "map"])) (["Name" "max_entries"])))) (["ReturnStatement"] (["IdExpression" "problem-type"] (["Name" "NULL"])))) (["ReturnStatement"] (["BinaryExpression" "problem-type" :plus] (["FieldReference" "problem-type"] (["IdExpression" "problem-type"] (["Name" "array"])) (["Name" "value"])) (["BinaryExpression" "problem-type" :multiply] (["FieldReference" "problem-type"] (["IdExpression" "problem-type"] (["Name" "array"])) (["Name" "elem_size"])) (["IdExpression" "problem-type"] (["Name" "index"]))))))) (["FunctionDefinition"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["FunctionDeclarator"] (["Name" "array_map_gen_lookup"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map"])) (["Declarator"] (["Pointer"]) (["Name" "map"]))) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_insn"])) (["Declarator"] (["Pointer"]) (["Name" "insn_buf"])))) (["CompoundStatement"] (["DeclarationStatement"] (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_insn"])) (["Declarator"] (["Pointer"]) (["Name" "insn"]) (["EqualsInitializer"] (["IdExpression" "bpf_insn *"] (["Name" "insn_buf"])))))) (["DeclarationStatement"] (["SimpleDeclaration"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["Declarator"] (["Name" "elem_size"]) (["EqualsInitializer"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "round_up"])) (["FieldReference" "problem-type"] (["IdExpression" "bpf_map *"] (["Name" "map"])) (["Name" "value_size"])) (["LiteralExpression" "int"])))))) (["DeclarationStatement"] (["SimpleDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Name" "ret"]) (["EqualsInitializer"] (["IdExpression" "problem-type"] (["Name" "BPF_REG_0"])))))) (["DeclarationStatement"] (["SimpleDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Name" "map_ptr"]) (["EqualsInitializer"] (["IdExpression" "problem-type"] (["Name" "BPF_REG_1"])))))) (["DeclarationStatement"] (["SimpleDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Name" "index"]) (["EqualsInitializer"] (["IdExpression" "problem-type"] (["Name" "BPF_REG_2"])))))) (["ProblemStatement"] (["Problem"])) (["ExpressionStatement"] (["BinaryExpression" "problem-binding" :assign] (["UnaryExpression" "bpf_insn" :star] (["UnaryExpression" "bpf_insn *" :postFixIncr] (["IdExpression" "bpf_insn *"] (["Name" "insn"])))) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "BPF_LDX_MEM"])) (["IdExpression" "problem-type"] (["Name" "BPF_W"])) (["IdExpression" "const int"] (["Name" "ret"])) (["IdExpression" "const int"] (["Name" "index"])) (["LiteralExpression" "int"])))) (["ExpressionStatement"] (["BinaryExpression" "problem-binding" :assign] (["UnaryExpression" "bpf_insn" :star] (["UnaryExpression" "bpf_insn *" :postFixIncr] (["IdExpression" "bpf_insn *"] (["Name" "insn"])))) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "BPF_JMP_IMM"])) (["IdExpression" "problem-type"] (["Name" "BPF_JGE"])) (["IdExpression" "const int"] (["Name" "ret"])) (["FieldReference" "problem-type"] (["IdExpression" "bpf_map *"] (["Name" "map"])) (["Name" "max_entries"])) (["LiteralExpression" "int"])))) (["IfStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "is_power_of_2"])) (["IdExpression" "problem-type"] (["Name" "elem_size"]))) (["CompoundStatement"] (["ExpressionStatement"] (["BinaryExpression" "problem-binding" :assign] (["UnaryExpression" "bpf_insn" :star] (["UnaryExpression" "bpf_insn *" :postFixIncr] (["IdExpression" "bpf_insn *"] (["Name" "insn"])))) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "BPF_ALU64_IMM"])) (["IdExpression" "problem-type"] (["Name" "BPF_LSH"])) (["IdExpression" "const int"] (["Name" "ret"])) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "ilog2"])) (["IdExpression" "problem-type"] (["Name" "elem_size"]))))))) (["CompoundStatement"] (["ExpressionStatement"] (["BinaryExpression" "problem-binding" :assign] (["UnaryExpression" "bpf_insn" :star] (["UnaryExpression" "bpf_insn *" :postFixIncr] (["IdExpression" "bpf_insn *"] (["Name" "insn"])))) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "BPF_ALU64_IMM"])) (["IdExpression" "problem-type"] (["Name" "BPF_MUL"])) (["IdExpression" "const int"] (["Name" "ret"])) (["IdExpression" "problem-type"] (["Name" "elem_size"]))))))) (["ExpressionStatement"] (["BinaryExpression" "problem-binding" :assign] (["UnaryExpression" "bpf_insn" :star] (["UnaryExpression" "bpf_insn *" :postFixIncr] (["IdExpression" "bpf_insn *"] (["Name" "insn"])))) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "BPF_ALU64_REG"])) (["IdExpression" "problem-type"] (["Name" "BPF_ADD"])) (["IdExpression" "const int"] (["Name" "ret"])) (["IdExpression" "const int"] (["Name" "map_ptr"]))))) (["ExpressionStatement"] (["BinaryExpression" "problem-binding" :assign] (["UnaryExpression" "bpf_insn" :star] (["UnaryExpression" "bpf_insn *" :postFixIncr] (["IdExpression" "bpf_insn *"] (["Name" "insn"])))) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "BPF_JMP_IMM"])) (["IdExpression" "problem-type"] (["Name" "BPF_JA"])) (["LiteralExpression" "int"]) (["LiteralExpression" "int"]) (["LiteralExpression" "int"])))) (["ExpressionStatement"] (["BinaryExpression" "problem-binding" :assign] (["UnaryExpression" "bpf_insn" :star] (["UnaryExpression" "bpf_insn *" :postFixIncr] (["IdExpression" "bpf_insn *"] (["Name" "insn"])))) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "BPF_MOV64_IMM"])) (["IdExpression" "const int"] (["Name" "ret"])) (["LiteralExpression" "int"])))) (["ReturnStatement"] (["BinaryExpression" "long int" :minus] (["IdExpression" "bpf_insn *"] (["Name" "insn"])) (["IdExpression" "bpf_insn *"] (["Name" "insn_buf"])))))) (["FunctionDefinition"] (["SimpleDeclSpecifier"]) (["FunctionDeclarator"] (["Pointer"]) (["Name" "percpu_array_map_lookup_elem"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map"])) (["Declarator"] (["Pointer"]) (["Name" "map"]))) (["ParameterDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Pointer"]) (["Name" "key"])))) (["CompoundStatement"] (["DeclarationStatement"] (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_array"])))) (["ProblemStatement"] (["Problem"])) (["ProblemStatement"] (["Problem"])) (["DeclarationStatement"] (["SimpleDeclaration"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["Declarator"] (["Name" "index"]) (["EqualsInitializer"] (["UnaryExpression" "problem-type" :star] (["CastExpression" "? *"] (["TypeId"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["Declarator"] (["Pointer"]))) (["IdExpression" "void *"] (["Name" "key"])))))))) (["IfStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "unlikely"])) (["BinaryExpression" "problem-type" :greaterEqual] (["IdExpression" "problem-type"] (["Name" "index"])) (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "problem-type"] (["Name" "array"])) (["Name" "map"])) (["Name" "max_entries"])))) (["ReturnStatement"] (["IdExpression" "problem-type"] (["Name" "NULL"])))) (["ReturnStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "this_cpu_ptr"])) (["ArraySubscriptExpression" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "problem-type"] (["Name" "array"])) (["Name" "pptrs"])) (["IdExpression" "problem-type"] (["Name" "index"]))))))) (["FunctionDefinition"] (["SimpleDeclSpecifier"]) (["FunctionDeclarator"] (["Name" "bpf_percpu_array_copy"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map"])) (["Declarator"] (["Pointer"]) (["Name" "map"]))) (["ParameterDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Pointer"]) (["Name" "key"]))) (["ParameterDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Pointer"]) (["Name" "value"])))) (["CompoundStatement"] (["DeclarationStatement"] (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_array"])))) (["ProblemStatement"] (["Problem"])) (["ProblemStatement"] (["Problem"])) (["DeclarationStatement"] (["SimpleDeclaration"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["Declarator"] (["Name" "index"]) (["EqualsInitializer"] (["UnaryExpression" "problem-type" :star] (["CastExpression" "? *"] (["TypeId"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["Declarator"] (["Pointer"]))) (["IdExpression" "void *"] (["Name" "key"])))))))) (["DeclarationStatement"] (["SimpleDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Name" "__percpu"])))) (["ProblemStatement"] (["Problem"])) (["ExpressionStatement"] (["UnaryExpression" "problem-type" :star] (["IdExpression" "problem-type"] (["Name" "pptr"])))) (["DeclarationStatement"] (["SimpleDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Name" "cpu"])) (["Declarator"] (["Name" "off"]) (["EqualsInitializer"] (["LiteralExpression" "int"]))))) (["DeclarationStatement"] (["SimpleDeclaration"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["Declarator"] (["Name" "size"])))) (["IfStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "unlikely"])) (["BinaryExpression" "problem-type" :greaterEqual] (["IdExpression" "problem-type"] (["Name" "index"])) (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "problem-type"] (["Name" "array"])) (["Name" "map"])) (["Name" "max_entries"])))) (["ReturnStatement"] (["UnaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "ENOENT"]))))) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :assign] (["IdExpression" "problem-type"] (["Name" "size"])) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "round_up"])) (["FieldReference" "problem-type"] (["IdExpression" "bpf_map *"] (["Name" "map"])) (["Name" "value_size"])) (["LiteralExpression" "int"])))) (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "rcu_read_lock"])))) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :assign] (["IdExpression" "problem-type"] (["Name" "pptr"])) (["ArraySubscriptExpression" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "problem-type"] (["Name" "array"])) (["Name" "pptrs"])) (["IdExpression" "problem-type"] (["Name" "index"]))))) (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "for_each_possible_cpu"])) (["IdExpression" "int"] (["Name" "cpu"])))) (["ProblemStatement"] (["Problem"])) (["CompoundStatement"] (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "bpf_long_memcpy"])) (["BinaryExpression" "void *" :plus] (["IdExpression" "void *"] (["Name" "value"])) (["IdExpression" "int"] (["Name" "off"]))) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "per_cpu_ptr"])) (["IdExpression" "problem-type"] (["Name" "pptr"])) (["IdExpression" "int"] (["Name" "cpu"]))) (["IdExpression" "problem-type"] (["Name" "size"])))) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :plusAssign] (["IdExpression" "int"] (["Name" "off"])) (["IdExpression" "problem-type"] (["Name" "size"]))))) (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "rcu_read_unlock"])))) (["ReturnStatement"] (["LiteralExpression" "int"])))) (["FunctionDefinition"] (["SimpleDeclSpecifier"]) (["FunctionDeclarator"] (["Name" "array_map_get_next_key"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map"])) (["Declarator"] (["Pointer"]) (["Name" "map"]))) (["ParameterDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Pointer"]) (["Name" "key"]))) (["ParameterDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Pointer"]) (["Name" "next_key"])))) (["CompoundStatement"] (["DeclarationStatement"] (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_array"])))) (["ProblemStatement"] (["Problem"])) (["ProblemStatement"] (["Problem"])) (["DeclarationStatement"] (["SimpleDeclaration"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["Declarator"] (["Name" "index"]) (["EqualsInitializer"] (["ConditionalExpression" "problem-type"] (["IdExpression" "void *"] (["Name" "key"])) (["UnaryExpression" "problem-type" :star] (["CastExpression" "? *"] (["TypeId"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["Declarator"] (["Pointer"]))) (["IdExpression" "void *"] (["Name" "key"])))) (["IdExpression" "problem-type"] (["Name" "U32_MAX"]))))))) (["DeclarationStatement"] (["SimpleDeclaration"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["Declarator"] (["Pointer"]) (["Name" "next"]) (["EqualsInitializer"] (["CastExpression" "? *"] (["TypeId"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["Declarator"] (["Pointer"]))) (["IdExpression" "void *"] (["Name" "next_key"]))))))) (["IfStatement"] (["BinaryExpression" "problem-type" :greaterEqual] (["IdExpression" "problem-type"] (["Name" "index"])) (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "problem-type"] (["Name" "array"])) (["Name" "map"])) (["Name" "max_entries"]))) (["CompoundStatement"] (["ExpressionStatement"] (["BinaryExpression" "problem-type" :assign] (["UnaryExpression" "problem-type" :star] (["IdExpression" "? *"] (["Name" "next"]))) (["LiteralExpression" "int"]))) (["ReturnStatement"] (["LiteralExpression" "int"])))) (["IfStatement"] (["BinaryExpression" "problem-type" :equals] (["IdExpression" "problem-type"] (["Name" "index"])) (["BinaryExpression" "problem-type" :minus] (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "problem-type"] (["Name" "array"])) (["Name" "map"])) (["Name" "max_entries"])) (["LiteralExpression" "int"]))) (["ReturnStatement"] (["UnaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "ENOENT"]))))) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :assign] (["UnaryExpression" "problem-type" :star] (["IdExpression" "? *"] (["Name" "next"]))) (["BinaryExpression" "problem-type" :plus] (["IdExpression" "problem-type"] (["Name" "index"])) (["LiteralExpression" "int"])))) (["ReturnStatement"] (["LiteralExpression" "int"])))) (["FunctionDefinition"] (["SimpleDeclSpecifier"]) (["FunctionDeclarator"] (["Name" "array_map_update_elem"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map"])) (["Declarator"] (["Pointer"]) (["Name" "map"]))) (["ParameterDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Pointer"]) (["Name" "key"]))) (["ParameterDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Pointer"]) (["Name" "value"]))) (["ParameterDeclaration"] (["NamedTypeSpecifier"] (["Name" "u64"])) (["Declarator"] (["Name" "map_flags"])))) (["CompoundStatement"] (["DeclarationStatement"] (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_array"])))) (["ProblemStatement"] (["Problem"])) (["ProblemStatement"] (["Problem"])) (["DeclarationStatement"] (["SimpleDeclaration"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["Declarator"] (["Name" "index"]) (["EqualsInitializer"] (["UnaryExpression" "problem-type" :star] (["CastExpression" "? *"] (["TypeId"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["Declarator"] (["Pointer"]))) (["IdExpression" "void *"] (["Name" "key"])))))))) (["IfStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "unlikely"])) (["BinaryExpression" "problem-type" :greaterThan] (["IdExpression" "problem-type"] (["Name" "map_flags"])) (["IdExpression" "problem-type"] (["Name" "BPF_EXIST"])))) (["ReturnStatement"] (["UnaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "EINVAL"]))))) (["IfStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "unlikely"])) (["BinaryExpression" "problem-type" :greaterEqual] (["IdExpression" "problem-type"] (["Name" "index"])) (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "problem-type"] (["Name" "array"])) (["Name" "map"])) (["Name" "max_entries"])))) (["ReturnStatement"] (["UnaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "E2BIG"]))))) (["IfStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "unlikely"])) (["BinaryExpression" "problem-type" :equals] (["IdExpression" "problem-type"] (["Name" "map_flags"])) (["IdExpression" "problem-type"] (["Name" "BPF_NOEXIST"])))) (["ReturnStatement"] (["UnaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "EEXIST"]))))) (["IfStatement"] (["BinaryExpression" "problem-type" :equals] (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "problem-type"] (["Name" "array"])) (["Name" "map"])) (["Name" "map_type"])) (["IdExpression" "problem-type"] (["Name" "BPF_MAP_TYPE_PERCPU_ARRAY"]))) (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "memcpy"])) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "this_cpu_ptr"])) (["ArraySubscriptExpression" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "problem-type"] (["Name" "array"])) (["Name" "pptrs"])) (["IdExpression" "problem-type"] (["Name" "index"])))) (["IdExpression" "void *"] (["Name" "value"])) (["FieldReference" "problem-type"] (["IdExpression" "bpf_map *"] (["Name" "map"])) (["Name" "value_size"])))) (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "memcpy"])) (["BinaryExpression" "problem-type" :plus] (["FieldReference" "problem-type"] (["IdExpression" "problem-type"] (["Name" "array"])) (["Name" "value"])) (["BinaryExpression" "problem-type" :multiply] (["FieldReference" "problem-type"] (["IdExpression" "problem-type"] (["Name" "array"])) (["Name" "elem_size"])) (["IdExpression" "problem-type"] (["Name" "index"])))) (["IdExpression" "void *"] (["Name" "value"])) (["FieldReference" "problem-type"] (["IdExpression" "bpf_map *"] (["Name" "map"])) (["Name" "value_size"]))))) (["ReturnStatement"] (["LiteralExpression" "int"])))) (["FunctionDefinition"] (["SimpleDeclSpecifier"]) (["FunctionDeclarator"] (["Name" "bpf_percpu_array_update"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map"])) (["Declarator"] (["Pointer"]) (["Name" "map"]))) (["ParameterDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Pointer"]) (["Name" "key"]))) (["ParameterDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Pointer"]) (["Name" "value"]))) (["ParameterDeclaration"] (["NamedTypeSpecifier"] (["Name" "u64"])) (["Declarator"] (["Name" "map_flags"])))) (["CompoundStatement"] (["DeclarationStatement"] (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_array"])))) (["ProblemStatement"] (["Problem"])) (["ProblemStatement"] (["Problem"])) (["DeclarationStatement"] (["SimpleDeclaration"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["Declarator"] (["Name" "index"]) (["EqualsInitializer"] (["UnaryExpression" "problem-type" :star] (["CastExpression" "? *"] (["TypeId"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["Declarator"] (["Pointer"]))) (["IdExpression" "void *"] (["Name" "key"])))))))) (["DeclarationStatement"] (["SimpleDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Name" "__percpu"])))) (["ProblemStatement"] (["Problem"])) (["ExpressionStatement"] (["UnaryExpression" "problem-type" :star] (["IdExpression" "problem-type"] (["Name" "pptr"])))) (["DeclarationStatement"] (["SimpleDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Name" "cpu"])) (["Declarator"] (["Name" "off"]) (["EqualsInitializer"] (["LiteralExpression" "int"]))))) (["DeclarationStatement"] (["SimpleDeclaration"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["Declarator"] (["Name" "size"])))) (["IfStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "unlikely"])) (["BinaryExpression" "problem-type" :greaterThan] (["IdExpression" "problem-type"] (["Name" "map_flags"])) (["IdExpression" "problem-type"] (["Name" "BPF_EXIST"])))) (["ReturnStatement"] (["UnaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "EINVAL"]))))) (["IfStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "unlikely"])) (["BinaryExpression" "problem-type" :greaterEqual] (["IdExpression" "problem-type"] (["Name" "index"])) (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "problem-type"] (["Name" "array"])) (["Name" "map"])) (["Name" "max_entries"])))) (["ReturnStatement"] (["UnaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "E2BIG"]))))) (["IfStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "unlikely"])) (["BinaryExpression" "problem-type" :equals] (["IdExpression" "problem-type"] (["Name" "map_flags"])) (["IdExpression" "problem-type"] (["Name" "BPF_NOEXIST"])))) (["ReturnStatement"] (["UnaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "EEXIST"]))))) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :assign] (["IdExpression" "problem-type"] (["Name" "size"])) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "round_up"])) (["FieldReference" "problem-type"] (["IdExpression" "bpf_map *"] (["Name" "map"])) (["Name" "value_size"])) (["LiteralExpression" "int"])))) (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "rcu_read_lock"])))) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :assign] (["IdExpression" "problem-type"] (["Name" "pptr"])) (["ArraySubscriptExpression" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "problem-type"] (["Name" "array"])) (["Name" "pptrs"])) (["IdExpression" "problem-type"] (["Name" "index"]))))) (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "for_each_possible_cpu"])) (["IdExpression" "int"] (["Name" "cpu"])))) (["ProblemStatement"] (["Problem"])) (["CompoundStatement"] (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "bpf_long_memcpy"])) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "per_cpu_ptr"])) (["IdExpression" "problem-type"] (["Name" "pptr"])) (["IdExpression" "int"] (["Name" "cpu"]))) (["BinaryExpression" "void *" :plus] (["IdExpression" "void *"] (["Name" "value"])) (["IdExpression" "int"] (["Name" "off"]))) (["IdExpression" "problem-type"] (["Name" "size"])))) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :plusAssign] (["IdExpression" "int"] (["Name" "off"])) (["IdExpression" "problem-type"] (["Name" "size"]))))) (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "rcu_read_unlock"])))) (["ReturnStatement"] (["LiteralExpression" "int"])))) (["FunctionDefinition"] (["SimpleDeclSpecifier"]) (["FunctionDeclarator"] (["Name" "array_map_delete_elem"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map"])) (["Declarator"] (["Pointer"]) (["Name" "map"]))) (["ParameterDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Pointer"]) (["Name" "key"])))) (["CompoundStatement"] (["ReturnStatement"] (["UnaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "EINVAL"])))))) (["FunctionDefinition"] (["SimpleDeclSpecifier"]) (["FunctionDeclarator"] (["Name" "array_map_free"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map"])) (["Declarator"] (["Pointer"]) (["Name" "map"])))) (["CompoundStatement"] (["DeclarationStatement"] (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_array"])))) (["ProblemStatement"] (["Problem"])) (["ProblemStatement"] (["Problem"])) (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "synchronize_rcu"])))) (["IfStatement"] (["BinaryExpression" "problem-type" :equals] (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "problem-type"] (["Name" "array"])) (["Name" "map"])) (["Name" "map_type"])) (["IdExpression" "problem-type"] (["Name" "BPF_MAP_TYPE_PERCPU_ARRAY"]))) (["DeclarationStatement"] (["SimpleDeclaration"] (["NamedTypeSpecifier"] (["Name" "bpf_array_free_percpu"])) (["Declarator"] (["Declarator"] (["Name" "array"])))))) (["DeclarationStatement"] (["SimpleDeclaration"] (["NamedTypeSpecifier"] (["Name" "bpf_map_area_free"])) (["Declarator"] (["Declarator"] (["Name" "array"]))))))) (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map_ops"])) (["Declarator"] (["Name" "array_map_ops"]) (["EqualsInitializer"] (["InitializerList"] (["DesignatedInitializer"] (["Name" "map_alloc"]) (["IdExpression" "bpf_map * (bpf_attr *)"] (["Name" "array_map_alloc"]))) (["DesignatedInitializer"] (["Name" "map_free"]) (["IdExpression" "void (bpf_map *)"] (["Name" "array_map_free"]))) (["DesignatedInitializer"] (["Name" "map_get_next_key"]) (["IdExpression" "int (bpf_map *, void *, void *)"] (["Name" "array_map_get_next_key"]))) (["DesignatedInitializer"] (["Name" "map_lookup_elem"]) (["IdExpression" "void * (bpf_map *, void *)"] (["Name" "array_map_lookup_elem"]))) (["DesignatedInitializer"] (["Name" "map_update_elem"]) (["IdExpression" "int (bpf_map *, void *, void *, ?)"] (["Name" "array_map_update_elem"]))) (["DesignatedInitializer"] (["Name" "map_delete_elem"]) (["IdExpression" "int (bpf_map *, void *)"] (["Name" "array_map_delete_elem"]))) (["DesignatedInitializer"] (["Name" "map_gen_lookup"]) (["IdExpression" "? (bpf_map *, bpf_insn *)"] (["Name" "array_map_gen_lookup"]))))))) (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map_ops"])) (["Declarator"] (["Name" "percpu_array_map_ops"]) (["EqualsInitializer"] (["InitializerList"] (["DesignatedInitializer"] (["Name" "map_alloc"]) (["IdExpression" "bpf_map * (bpf_attr *)"] (["Name" "array_map_alloc"]))) (["DesignatedInitializer"] (["Name" "map_free"]) (["IdExpression" "void (bpf_map *)"] (["Name" "array_map_free"]))) (["DesignatedInitializer"] (["Name" "map_get_next_key"]) (["IdExpression" "int (bpf_map *, void *, void *)"] (["Name" "array_map_get_next_key"]))) (["DesignatedInitializer"] (["Name" "map_lookup_elem"]) (["IdExpression" "void * (bpf_map *, void *)"] (["Name" "percpu_array_map_lookup_elem"]))) (["DesignatedInitializer"] (["Name" "map_update_elem"]) (["IdExpression" "int (bpf_map *, void *, void *, ?)"] (["Name" "array_map_update_elem"]))) (["DesignatedInitializer"] (["Name" "map_delete_elem"]) (["IdExpression" "int (bpf_map *, void *)"] (["Name" "array_map_delete_elem"]))))))) (["FunctionDefinition"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map"])) (["FunctionDeclarator"] (["Pointer"]) (["Name" "fd_array_map_alloc"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_attr"])) (["Declarator"] (["Pointer"]) (["Name" "attr"])))) (["CompoundStatement"] (["IfStatement"] (["BinaryExpression" "problem-type" :notequals] (["FieldReference" "problem-type"] (["IdExpression" "bpf_attr *"] (["Name" "attr"])) (["Name" "value_size"])) (["TypeIdExpression" "problem-type"] (["TypeId"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["Declarator"])))) (["ReturnStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "ERR_PTR"])) (["UnaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "EINVAL"])))))) (["ReturnStatement"] (["FunctionCallExpression" "bpf_map *"] (["IdExpression" "bpf_map * (bpf_attr *)"] (["Name" "array_map_alloc"])) (["IdExpression" "bpf_attr *"] (["Name" "attr"])))))) (["FunctionDefinition"] (["SimpleDeclSpecifier"]) (["FunctionDeclarator"] (["Name" "fd_array_map_free"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map"])) (["Declarator"] (["Pointer"]) (["Name" "map"])))) (["CompoundStatement"] (["DeclarationStatement"] (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_array"])))) (["ProblemStatement"] (["Problem"])) (["ProblemStatement"] (["Problem"])) (["DeclarationStatement"] (["SimpleDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Name" "i"])))) (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "synchronize_rcu"])))) (["ForStatement"] (["ExpressionStatement"] (["BinaryExpression" "int" :assign] (["IdExpression" "int"] (["Name" "i"])) (["LiteralExpression" "int"]))) (["BinaryExpression" "problem-type" :lessThan] (["IdExpression" "int"] (["Name" "i"])) (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "problem-type"] (["Name" "array"])) (["Name" "map"])) (["Name" "max_entries"]))) (["UnaryExpression" "int" :postFixIncr] (["IdExpression" "int"] (["Name" "i"]))) (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "BUG_ON"])) (["BinaryExpression" "problem-type" :notequals] (["ArraySubscriptExpression" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "problem-type"] (["Name" "array"])) (["Name" "ptrs"])) (["IdExpression" "int"] (["Name" "i"]))) (["IdExpression" "problem-type"] (["Name" "NULL"])))))) (["DeclarationStatement"] (["SimpleDeclaration"] (["NamedTypeSpecifier"] (["Name" "bpf_map_area_free"])) (["Declarator"] (["Declarator"] (["Name" "array"]))))))) (["FunctionDefinition"] (["SimpleDeclSpecifier"]) (["FunctionDeclarator"] (["Pointer"]) (["Name" "fd_array_map_lookup_elem"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map"])) (["Declarator"] (["Pointer"]) (["Name" "map"]))) (["ParameterDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Pointer"]) (["Name" "key"])))) (["CompoundStatement"] (["ReturnStatement"] (["IdExpression" "problem-type"] (["Name" "NULL"]))))) (["FunctionDefinition"] (["SimpleDeclSpecifier"]) (["FunctionDeclarator"] (["Name" "bpf_fd_array_map_lookup_elem"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map"])) (["Declarator"] (["Pointer"]) (["Name" "map"]))) (["ParameterDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Pointer"]) (["Name" "key"]))) (["ParameterDeclaration"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["Declarator"] (["Pointer"]) (["Name" "value"])))) (["CompoundStatement"] (["DeclarationStatement"] (["SimpleDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Pointer"]) (["Pointer"]) (["Name" "elem"])) (["Declarator"] (["Pointer"]) (["Name" "ptr"])))) (["DeclarationStatement"] (["SimpleDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Name" "ret"]) (["EqualsInitializer"] (["LiteralExpression" "int"]))))) (["IfStatement"] (["UnaryExpression" "bool" :not] (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "bpf_map *"] (["Name" "map"])) (["Name" "ops"])) (["Name" "map_fd_sys_lookup_elem"]))) (["ReturnStatement"] (["UnaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "ENOTSUPP"]))))) (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "rcu_read_lock"])))) (["ExpressionStatement"] (["BinaryExpression" "void * *" :assign] (["IdExpression" "void * *"] (["Name" "elem"])) (["FunctionCallExpression" "void *"] (["IdExpression" "void * (bpf_map *, void *)"] (["Name" "array_map_lookup_elem"])) (["IdExpression" "bpf_map *"] (["Name" "map"])) (["IdExpression" "void *"] (["Name" "key"]))))) (["IfStatement"] (["BinaryExpression" "problem-binding" :logicalAnd] (["IdExpression" "void * *"] (["Name" "elem"])) (["UnaryExpression" "problem-binding" :bracketedPrimary] (["BinaryExpression" "problem-binding" :assign] (["IdExpression" "void *"] (["Name" "ptr"])) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "READ_ONCE"])) (["UnaryExpression" "void *" :star] (["IdExpression" "void * *"] (["Name" "elem"]))))))) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :assign] (["UnaryExpression" "problem-type" :star] (["IdExpression" "? *"] (["Name" "value"]))) (["FunctionCallExpression" "problem-type"] (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "bpf_map *"] (["Name" "map"])) (["Name" "ops"])) (["Name" "map_fd_sys_lookup_elem"])) (["IdExpression" "void *"] (["Name" "ptr"]))))) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :assign] (["IdExpression" "int"] (["Name" "ret"])) (["UnaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "ENOENT"])))))) (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "rcu_read_unlock"])))) (["ReturnStatement"] (["IdExpression" "int"] (["Name" "ret"]))))) (["FunctionDefinition"] (["SimpleDeclSpecifier"]) (["FunctionDeclarator"] (["Name" "bpf_fd_array_map_update_elem"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map"])) (["Declarator"] (["Pointer"]) (["Name" "map"]))) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "file"])) (["Declarator"] (["Pointer"]) (["Name" "map_file"]))) (["ParameterDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Pointer"]) (["Name" "key"]))) (["ParameterDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Pointer"]) (["Name" "value"]))) (["ParameterDeclaration"] (["NamedTypeSpecifier"] (["Name" "u64"])) (["Declarator"] (["Name" "map_flags"])))) (["CompoundStatement"] (["DeclarationStatement"] (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_array"])))) (["ProblemStatement"] (["Problem"])) (["ProblemStatement"] (["Problem"])) (["DeclarationStatement"] (["SimpleDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Pointer"]) (["Name" "new_ptr"])) (["Declarator"] (["Pointer"]) (["Name" "old_ptr"])))) (["DeclarationStatement"] (["SimpleDeclaration"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["Declarator"] (["Name" "index"]) (["EqualsInitializer"] (["UnaryExpression" "problem-type" :star] (["CastExpression" "? *"] (["TypeId"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["Declarator"] (["Pointer"]))) (["IdExpression" "void *"] (["Name" "key"])))))) (["Declarator"] (["Name" "ufd"])))) (["IfStatement"] (["BinaryExpression" "problem-type" :notequals] (["IdExpression" "problem-type"] (["Name" "map_flags"])) (["IdExpression" "problem-type"] (["Name" "BPF_ANY"]))) (["ReturnStatement"] (["UnaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "EINVAL"]))))) (["IfStatement"] (["BinaryExpression" "problem-type" :greaterEqual] (["IdExpression" "problem-type"] (["Name" "index"])) (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "problem-type"] (["Name" "array"])) (["Name" "map"])) (["Name" "max_entries"]))) (["ReturnStatement"] (["UnaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "E2BIG"]))))) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :assign] (["IdExpression" "problem-type"] (["Name" "ufd"])) (["UnaryExpression" "problem-type" :star] (["CastExpression" "? *"] (["TypeId"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["Declarator"] (["Pointer"]))) (["IdExpression" "void *"] (["Name" "value"])))))) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :assign] (["IdExpression" "void *"] (["Name" "new_ptr"])) (["FunctionCallExpression" "problem-type"] (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "bpf_map *"] (["Name" "map"])) (["Name" "ops"])) (["Name" "map_fd_get_ptr"])) (["IdExpression" "bpf_map *"] (["Name" "map"])) (["IdExpression" "file *"] (["Name" "map_file"])) (["IdExpression" "problem-type"] (["Name" "ufd"]))))) (["IfStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "IS_ERR"])) (["IdExpression" "void *"] (["Name" "new_ptr"]))) (["ReturnStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "PTR_ERR"])) (["IdExpression" "void *"] (["Name" "new_ptr"]))))) (["ExpressionStatement"] (["BinaryExpression" "problem-binding" :assign] (["IdExpression" "void *"] (["Name" "old_ptr"])) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "xchg"])) (["BinaryExpression" "problem-type" :plus] (["FieldReference" "problem-type"] (["IdExpression" "problem-type"] (["Name" "array"])) (["Name" "ptrs"])) (["IdExpression" "problem-type"] (["Name" "index"]))) (["IdExpression" "void *"] (["Name" "new_ptr"]))))) (["IfStatement"] (["IdExpression" "void *"] (["Name" "old_ptr"])) (["ExpressionStatement"] (["FunctionCallExpression" "problem-type"] (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "bpf_map *"] (["Name" "map"])) (["Name" "ops"])) (["Name" "map_fd_put_ptr"])) (["IdExpression" "void *"] (["Name" "old_ptr"]))))) (["ReturnStatement"] (["LiteralExpression" "int"])))) (["FunctionDefinition"] (["SimpleDeclSpecifier"]) (["FunctionDeclarator"] (["Name" "fd_array_map_delete_elem"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map"])) (["Declarator"] (["Pointer"]) (["Name" "map"]))) (["ParameterDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Pointer"]) (["Name" "key"])))) (["CompoundStatement"] (["DeclarationStatement"] (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_array"])))) (["ProblemStatement"] (["Problem"])) (["ProblemStatement"] (["Problem"])) (["DeclarationStatement"] (["SimpleDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Pointer"]) (["Name" "old_ptr"])))) (["DeclarationStatement"] (["SimpleDeclaration"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["Declarator"] (["Name" "index"]) (["EqualsInitializer"] (["UnaryExpression" "problem-type" :star] (["CastExpression" "? *"] (["TypeId"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["Declarator"] (["Pointer"]))) (["IdExpression" "void *"] (["Name" "key"])))))))) (["IfStatement"] (["BinaryExpression" "problem-type" :greaterEqual] (["IdExpression" "problem-type"] (["Name" "index"])) (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "problem-type"] (["Name" "array"])) (["Name" "map"])) (["Name" "max_entries"]))) (["ReturnStatement"] (["UnaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "E2BIG"]))))) (["ExpressionStatement"] (["BinaryExpression" "problem-binding" :assign] (["IdExpression" "void *"] (["Name" "old_ptr"])) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "xchg"])) (["BinaryExpression" "problem-type" :plus] (["FieldReference" "problem-type"] (["IdExpression" "problem-type"] (["Name" "array"])) (["Name" "ptrs"])) (["IdExpression" "problem-type"] (["Name" "index"]))) (["IdExpression" "problem-type"] (["Name" "NULL"]))))) (["IfStatement"] (["IdExpression" "void *"] (["Name" "old_ptr"])) (["CompoundStatement"] (["ExpressionStatement"] (["FunctionCallExpression" "problem-type"] (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "bpf_map *"] (["Name" "map"])) (["Name" "ops"])) (["Name" "map_fd_put_ptr"])) (["IdExpression" "void *"] (["Name" "old_ptr"])))) (["ReturnStatement"] (["LiteralExpression" "int"]))) (["CompoundStatement"] (["ReturnStatement"] (["UnaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "ENOENT"])))))))) (["FunctionDefinition"] (["SimpleDeclSpecifier"]) (["FunctionDeclarator"] (["Pointer"]) (["Name" "prog_fd_array_get_ptr"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map"])) (["Declarator"] (["Pointer"]) (["Name" "map"]))) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "file"])) (["Declarator"] (["Pointer"]) (["Name" "map_file"]))) (["ParameterDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Name" "fd"])))) (["CompoundStatement"] (["DeclarationStatement"] (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_array"])))) (["ProblemStatement"] (["Problem"])) (["ProblemStatement"] (["Problem"])) (["DeclarationStatement"] (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_prog"])) (["Declarator"] (["Pointer"]) (["Name" "prog"]) (["EqualsInitializer"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "bpf_prog_get"])) (["IdExpression" "int"] (["Name" "fd"]))))))) (["IfStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "IS_ERR"])) (["IdExpression" "{arraymap.c:10949}::bpf_prog *"] (["Name" "prog"]))) (["ReturnStatement"] (["IdExpression" "{arraymap.c:10949}::bpf_prog *"] (["Name" "prog"])))) (["IfStatement"] (["UnaryExpression" "bool" :not] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "bpf_prog_array_compatible"])) (["IdExpression" "problem-type"] (["Name" "array"])) (["IdExpression" "{arraymap.c:10949}::bpf_prog *"] (["Name" "prog"])))) (["CompoundStatement"] (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "bpf_prog_put"])) (["IdExpression" "{arraymap.c:10949}::bpf_prog *"] (["Name" "prog"])))) (["ReturnStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "ERR_PTR"])) (["UnaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "EINVAL"]))))))) (["ReturnStatement"] (["IdExpression" "{arraymap.c:10949}::bpf_prog *"] (["Name" "prog"]))))) (["FunctionDefinition"] (["SimpleDeclSpecifier"]) (["FunctionDeclarator"] (["Name" "prog_fd_array_put_ptr"]) (["ParameterDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Pointer"]) (["Name" "ptr"])))) (["CompoundStatement"] (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "bpf_prog_put"])) (["IdExpression" "void *"] (["Name" "ptr"])))))) (["FunctionDefinition"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["FunctionDeclarator"] (["Name" "prog_fd_array_sys_lookup_elem"]) (["ParameterDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Pointer"]) (["Name" "ptr"])))) (["CompoundStatement"] (["ReturnStatement"] (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["UnaryExpression" "bpf_prog *" :bracketedPrimary] (["CastExpression" "bpf_prog *"] (["TypeId"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_prog"])) (["Declarator"] (["Pointer"]))) (["IdExpression" "void *"] (["Name" "ptr"])))) (["Name" "aux"])) (["Name" "id"]))))) (["FunctionDefinition"] (["SimpleDeclSpecifier"]) (["FunctionDeclarator"] (["Name" "bpf_fd_array_map_clear"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map"])) (["Declarator"] (["Pointer"]) (["Name" "map"])))) (["CompoundStatement"] (["DeclarationStatement"] (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_array"])))) (["ProblemStatement"] (["Problem"])) (["ProblemStatement"] (["Problem"])) (["DeclarationStatement"] (["SimpleDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Name" "i"])))) (["ForStatement"] (["ExpressionStatement"] (["BinaryExpression" "int" :assign] (["IdExpression" "int"] (["Name" "i"])) (["LiteralExpression" "int"]))) (["BinaryExpression" "problem-type" :lessThan] (["IdExpression" "int"] (["Name" "i"])) (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "problem-type"] (["Name" "array"])) (["Name" "map"])) (["Name" "max_entries"]))) (["UnaryExpression" "int" :postFixIncr] (["IdExpression" "int"] (["Name" "i"]))) (["ExpressionStatement"] (["FunctionCallExpression" "int"] (["IdExpression" "int (bpf_map *, void *)"] (["Name" "fd_array_map_delete_elem"])) (["IdExpression" "bpf_map *"] (["Name" "map"])) (["UnaryExpression" "int *" :amper] (["IdExpression" "int"] (["Name" "i"])))))))) (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map_ops"])) (["Declarator"] (["Name" "prog_array_map_ops"]) (["EqualsInitializer"] (["InitializerList"] (["DesignatedInitializer"] (["Name" "map_alloc"]) (["IdExpression" "bpf_map * (bpf_attr *)"] (["Name" "fd_array_map_alloc"]))) (["DesignatedInitializer"] (["Name" "map_free"]) (["IdExpression" "void (bpf_map *)"] (["Name" "fd_array_map_free"]))) (["DesignatedInitializer"] (["Name" "map_get_next_key"]) (["IdExpression" "int (bpf_map *, void *, void *)"] (["Name" "array_map_get_next_key"]))) (["DesignatedInitializer"] (["Name" "map_lookup_elem"]) (["IdExpression" "void * (bpf_map *, void *)"] (["Name" "fd_array_map_lookup_elem"]))) (["DesignatedInitializer"] (["Name" "map_delete_elem"]) (["IdExpression" "int (bpf_map *, void *)"] (["Name" "fd_array_map_delete_elem"]))) (["DesignatedInitializer"] (["Name" "map_fd_get_ptr"]) (["IdExpression" "void * (bpf_map *, file *, int)"] (["Name" "prog_fd_array_get_ptr"]))) (["DesignatedInitializer"] (["Name" "map_fd_put_ptr"]) (["IdExpression" "void (void *)"] (["Name" "prog_fd_array_put_ptr"]))) (["DesignatedInitializer"] (["Name" "map_fd_sys_lookup_elem"]) (["IdExpression" "? (void *)"] (["Name" "prog_fd_array_sys_lookup_elem"]))))))) (["FunctionDefinition"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_event_entry"])) (["FunctionDeclarator"] (["Pointer"]) (["Name" "bpf_event_entry_gen"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "file"])) (["Declarator"] (["Pointer"]) (["Name" "perf_file"]))) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "file"])) (["Declarator"] (["Pointer"]) (["Name" "map_file"])))) (["CompoundStatement"] (["DeclarationStatement"] (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_event_entry"])) (["Declarator"] (["Pointer"]) (["Name" "ee"])))) (["ExpressionStatement"] (["BinaryExpression" "problem-binding" :assign] (["IdExpression" "{arraymap.c:12174}::bpf_event_entry *"] (["Name" "ee"])) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "kzalloc"])) (["UnaryExpression" "unsigned long int" :sizeof] (["UnaryExpression" "bpf_event_entry" :bracketedPrimary] (["UnaryExpression" "bpf_event_entry" :star] (["IdExpression" "{arraymap.c:12174}::bpf_event_entry *"] (["Name" "ee"]))))) (["IdExpression" "problem-type"] (["Name" "GFP_ATOMIC"]))))) (["IfStatement"] (["IdExpression" "{arraymap.c:12174}::bpf_event_entry *"] (["Name" "ee"])) (["CompoundStatement"] (["ExpressionStatement"] (["BinaryExpression" "problem-type" :assign] (["FieldReference" "problem-type"] (["IdExpression" "{arraymap.c:12174}::bpf_event_entry *"] (["Name" "ee"])) (["Name" "event"])) (["FieldReference" "problem-type"] (["IdExpression" "file *"] (["Name" "perf_file"])) (["Name" "private_data"])))) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :assign] (["FieldReference" "problem-type"] (["IdExpression" "{arraymap.c:12174}::bpf_event_entry *"] (["Name" "ee"])) (["Name" "perf_file"])) (["IdExpression" "file *"] (["Name" "perf_file"])))) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :assign] (["FieldReference" "problem-type"] (["IdExpression" "{arraymap.c:12174}::bpf_event_entry *"] (["Name" "ee"])) (["Name" "map_file"])) (["IdExpression" "file *"] (["Name" "map_file"])))))) (["ReturnStatement"] (["IdExpression" "{arraymap.c:12174}::bpf_event_entry *"] (["Name" "ee"]))))) (["FunctionDefinition"] (["SimpleDeclSpecifier"]) (["FunctionDeclarator"] (["Name" "__bpf_event_entry_free"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "rcu_head"])) (["Declarator"] (["Pointer"]) (["Name" "rcu"])))) (["CompoundStatement"] (["DeclarationStatement"] (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_event_entry"])) (["Declarator"] (["Pointer"]) (["Name" "ee"])))) (["ProblemStatement"] (["Problem"])) (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "fput"])) (["FieldReference" "problem-type"] (["IdExpression" "{arraymap.c:12428}::bpf_event_entry *"] (["Name" "ee"])) (["Name" "perf_file"])))) (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "kfree"])) (["IdExpression" "{arraymap.c:12428}::bpf_event_entry *"] (["Name" "ee"])))))) (["FunctionDefinition"] (["SimpleDeclSpecifier"]) (["FunctionDeclarator"] (["Name" "bpf_event_entry_free_rcu"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_event_entry"])) (["Declarator"] (["Pointer"]) (["Name" "ee"])))) (["CompoundStatement"] (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "call_rcu"])) (["UnaryExpression" "? *" :amper] (["FieldReference" "problem-type"] (["IdExpression" "bpf_event_entry *"] (["Name" "ee"])) (["Name" "rcu"]))) (["IdExpression" "void (rcu_head *)"] (["Name" "__bpf_event_entry_free"])))))) (["FunctionDefinition"] (["SimpleDeclSpecifier"]) (["FunctionDeclarator"] (["Pointer"]) (["Name" "perf_event_fd_array_get_ptr"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map"])) (["Declarator"] (["Pointer"]) (["Name" "map"]))) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "file"])) (["Declarator"] (["Pointer"]) (["Name" "map_file"]))) (["ParameterDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Name" "fd"])))) (["CompoundStatement"] (["DeclarationStatement"] (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_event_entry"])) (["Declarator"] (["Pointer"]) (["Name" "ee"])))) (["DeclarationStatement"] (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "perf_event"])) (["Declarator"] (["Pointer"]) (["Name" "event"])))) (["DeclarationStatement"] (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "file"])) (["Declarator"] (["Pointer"]) (["Name" "perf_file"])))) (["DeclarationStatement"] (["SimpleDeclaration"] (["NamedTypeSpecifier"] (["Name" "u64"])) (["Declarator"] (["Name" "value"])))) (["ExpressionStatement"] (["BinaryExpression" "problem-binding" :assign] (["IdExpression" "file *"] (["Name" "perf_file"])) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "perf_event_get"])) (["IdExpression" "int"] (["Name" "fd"]))))) (["IfStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "IS_ERR"])) (["IdExpression" "file *"] (["Name" "perf_file"]))) (["ReturnStatement"] (["IdExpression" "file *"] (["Name" "perf_file"])))) (["ExpressionStatement"] (["BinaryExpression" "problem-binding" :assign] (["IdExpression" "bpf_event_entry *"] (["Name" "ee"])) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "ERR_PTR"])) (["UnaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "EOPNOTSUPP"])))))) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :assign] (["IdExpression" "{arraymap.c:12765}::perf_event *"] (["Name" "event"])) (["FieldReference" "problem-type"] (["IdExpression" "file *"] (["Name" "perf_file"])) (["Name" "private_data"])))) (["IfStatement"] (["BinaryExpression" "problem-binding" :equals] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "perf_event_read_local"])) (["IdExpression" "{arraymap.c:12765}::perf_event *"] (["Name" "event"])) (["UnaryExpression" "? *" :amper] (["IdExpression" "problem-type"] (["Name" "value"]))) (["IdExpression" "problem-type"] (["Name" "NULL"])) (["IdExpression" "problem-type"] (["Name" "NULL"]))) (["UnaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "EOPNOTSUPP"])))) (["GotoStatement"] (["Name" "err_out"]))) (["ExpressionStatement"] (["BinaryExpression" "bpf_event_entry *" :assign] (["IdExpression" "bpf_event_entry *"] (["Name" "ee"])) (["FunctionCallExpression" "bpf_event_entry *"] (["IdExpression" "bpf_event_entry * (file *, file *)"] (["Name" "bpf_event_entry_gen"])) (["IdExpression" "file *"] (["Name" "perf_file"])) (["IdExpression" "file *"] (["Name" "map_file"]))))) (["IfStatement"] (["IdExpression" "bpf_event_entry *"] (["Name" "ee"])) (["ReturnStatement"] (["IdExpression" "bpf_event_entry *"] (["Name" "ee"])))) (["ExpressionStatement"] (["BinaryExpression" "problem-binding" :assign] (["IdExpression" "bpf_event_entry *"] (["Name" "ee"])) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "ERR_PTR"])) (["UnaryExpression" "problem-type" :minus] (["IdExpression" "problem-type"] (["Name" "ENOMEM"])))))) (["LabelStatement"] (["Name" "err_out"]) (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "fput"])) (["IdExpression" "file *"] (["Name" "perf_file"]))))) (["ReturnStatement"] (["IdExpression" "bpf_event_entry *"] (["Name" "ee"]))))) (["FunctionDefinition"] (["SimpleDeclSpecifier"]) (["FunctionDeclarator"] (["Name" "perf_event_fd_array_put_ptr"]) (["ParameterDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Pointer"]) (["Name" "ptr"])))) (["CompoundStatement"] (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "bpf_event_entry_free_rcu"])) (["IdExpression" "void *"] (["Name" "ptr"])))))) (["FunctionDefinition"] (["SimpleDeclSpecifier"]) (["FunctionDeclarator"] (["Name" "perf_event_fd_array_release"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map"])) (["Declarator"] (["Pointer"]) (["Name" "map"]))) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "file"])) (["Declarator"] (["Pointer"]) (["Name" "map_file"])))) (["CompoundStatement"] (["DeclarationStatement"] (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_array"])))) (["ProblemStatement"] (["Problem"])) (["ProblemStatement"] (["Problem"])) (["DeclarationStatement"] (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_event_entry"])) (["Declarator"] (["Pointer"]) (["Name" "ee"])))) (["DeclarationStatement"] (["SimpleDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Name" "i"])))) (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "rcu_read_lock"])))) (["ForStatement"] (["ExpressionStatement"] (["BinaryExpression" "int" :assign] (["IdExpression" "int"] (["Name" "i"])) (["LiteralExpression" "int"]))) (["BinaryExpression" "problem-type" :lessThan] (["IdExpression" "int"] (["Name" "i"])) (["FieldReference" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "problem-type"] (["Name" "array"])) (["Name" "map"])) (["Name" "max_entries"]))) (["UnaryExpression" "int" :postFixIncr] (["IdExpression" "int"] (["Name" "i"]))) (["CompoundStatement"] (["ExpressionStatement"] (["BinaryExpression" "problem-binding" :assign] (["IdExpression" "bpf_event_entry *"] (["Name" "ee"])) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "READ_ONCE"])) (["ArraySubscriptExpression" "problem-type"] (["FieldReference" "problem-type"] (["IdExpression" "problem-type"] (["Name" "array"])) (["Name" "ptrs"])) (["IdExpression" "int"] (["Name" "i"])))))) (["IfStatement"] (["BinaryExpression" "problem-type" :logicalAnd] (["IdExpression" "bpf_event_entry *"] (["Name" "ee"])) (["BinaryExpression" "problem-type" :equals] (["FieldReference" "problem-type"] (["IdExpression" "bpf_event_entry *"] (["Name" "ee"])) (["Name" "map_file"])) (["IdExpression" "file *"] (["Name" "map_file"])))) (["ExpressionStatement"] (["FunctionCallExpression" "int"] (["IdExpression" "int (bpf_map *, void *)"] (["Name" "fd_array_map_delete_elem"])) (["IdExpression" "bpf_map *"] (["Name" "map"])) (["UnaryExpression" "int *" :amper] (["IdExpression" "int"] (["Name" "i"])))))))) (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "rcu_read_unlock"])))))) (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map_ops"])) (["Declarator"] (["Name" "perf_event_array_map_ops"]) (["EqualsInitializer"] (["InitializerList"] (["DesignatedInitializer"] (["Name" "map_alloc"]) (["IdExpression" "bpf_map * (bpf_attr *)"] (["Name" "fd_array_map_alloc"]))) (["DesignatedInitializer"] (["Name" "map_free"]) (["IdExpression" "void (bpf_map *)"] (["Name" "fd_array_map_free"]))) (["DesignatedInitializer"] (["Name" "map_get_next_key"]) (["IdExpression" "int (bpf_map *, void *, void *)"] (["Name" "array_map_get_next_key"]))) (["DesignatedInitializer"] (["Name" "map_lookup_elem"]) (["IdExpression" "void * (bpf_map *, void *)"] (["Name" "fd_array_map_lookup_elem"]))) (["DesignatedInitializer"] (["Name" "map_delete_elem"]) (["IdExpression" "int (bpf_map *, void *)"] (["Name" "fd_array_map_delete_elem"]))) (["DesignatedInitializer"] (["Name" "map_fd_get_ptr"]) (["IdExpression" "void * (bpf_map *, file *, int)"] (["Name" "perf_event_fd_array_get_ptr"]))) (["DesignatedInitializer"] (["Name" "map_fd_put_ptr"]) (["IdExpression" "void (void *)"] (["Name" "perf_event_fd_array_put_ptr"]))) (["DesignatedInitializer"] (["Name" "map_release"]) (["IdExpression" "void (bpf_map *, file *)"] (["Name" "perf_event_fd_array_release"]))))))) (["FunctionDefinition"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map"])) (["FunctionDeclarator"] (["Pointer"]) (["Name" "array_of_map_alloc"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_attr"])) (["Declarator"] (["Pointer"]) (["Name" "attr"])))) (["CompoundStatement"] (["DeclarationStatement"] (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map"])) (["Declarator"] (["Pointer"]) (["Name" "map"])) (["Declarator"] (["Pointer"]) (["Name" "inner_map_meta"])))) (["ExpressionStatement"] (["BinaryExpression" "problem-binding" :assign] (["IdExpression" "bpf_map *"] (["Name" "inner_map_meta"])) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "bpf_map_meta_alloc"])) (["FieldReference" "problem-type"] (["IdExpression" "bpf_attr *"] (["Name" "attr"])) (["Name" "inner_map_fd"]))))) (["IfStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "IS_ERR"])) (["IdExpression" "bpf_map *"] (["Name" "inner_map_meta"]))) (["ReturnStatement"] (["IdExpression" "bpf_map *"] (["Name" "inner_map_meta"])))) (["ExpressionStatement"] (["BinaryExpression" "bpf_map *" :assign] (["IdExpression" "bpf_map *"] (["Name" "map"])) (["FunctionCallExpression" "bpf_map *"] (["IdExpression" "bpf_map * (bpf_attr *)"] (["Name" "fd_array_map_alloc"])) (["IdExpression" "bpf_attr *"] (["Name" "attr"]))))) (["IfStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "IS_ERR"])) (["IdExpression" "bpf_map *"] (["Name" "map"]))) (["CompoundStatement"] (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "bpf_map_meta_free"])) (["IdExpression" "bpf_map *"] (["Name" "inner_map_meta"])))) (["ReturnStatement"] (["IdExpression" "bpf_map *"] (["Name" "map"]))))) (["ExpressionStatement"] (["BinaryExpression" "problem-type" :assign] (["FieldReference" "problem-type"] (["IdExpression" "bpf_map *"] (["Name" "map"])) (["Name" "inner_map_meta"])) (["IdExpression" "bpf_map *"] (["Name" "inner_map_meta"])))) (["ReturnStatement"] (["IdExpression" "bpf_map *"] (["Name" "map"]))))) (["FunctionDefinition"] (["SimpleDeclSpecifier"]) (["FunctionDeclarator"] (["Name" "array_of_map_free"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map"])) (["Declarator"] (["Pointer"]) (["Name" "map"])))) (["CompoundStatement"] (["ExpressionStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "bpf_map_meta_free"])) (["FieldReference" "problem-type"] (["IdExpression" "bpf_map *"] (["Name" "map"])) (["Name" "inner_map_meta"])))) (["ExpressionStatement"] (["FunctionCallExpression" "void"] (["IdExpression" "void (bpf_map *)"] (["Name" "bpf_fd_array_map_clear"])) (["IdExpression" "bpf_map *"] (["Name" "map"])))) (["ExpressionStatement"] (["FunctionCallExpression" "void"] (["IdExpression" "void (bpf_map *)"] (["Name" "fd_array_map_free"])) (["IdExpression" "bpf_map *"] (["Name" "map"])))))) (["FunctionDefinition"] (["SimpleDeclSpecifier"]) (["FunctionDeclarator"] (["Pointer"]) (["Name" "array_of_map_lookup_elem"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map"])) (["Declarator"] (["Pointer"]) (["Name" "map"]))) (["ParameterDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Pointer"]) (["Name" "key"])))) (["CompoundStatement"] (["DeclarationStatement"] (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map"])) (["Declarator"] (["Pointer"]) (["Pointer"]) (["Name" "inner_map"]) (["EqualsInitializer"] (["FunctionCallExpression" "void *"] (["IdExpression" "void * (bpf_map *, void *)"] (["Name" "array_map_lookup_elem"])) (["IdExpression" "bpf_map *"] (["Name" "map"])) (["IdExpression" "void *"] (["Name" "key"]))))))) (["IfStatement"] (["UnaryExpression" "bool" :not] (["IdExpression" "bpf_map * *"] (["Name" "inner_map"]))) (["ReturnStatement"] (["IdExpression" "problem-type"] (["Name" "NULL"])))) (["ReturnStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "READ_ONCE"])) (["UnaryExpression" "bpf_map *" :star] (["IdExpression" "bpf_map * *"] (["Name" "inner_map"]))))))) (["FunctionDefinition"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["FunctionDeclarator"] (["Name" "array_of_map_gen_lookup"]) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map"])) (["Declarator"] (["Pointer"]) (["Name" "map"]))) (["ParameterDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_insn"])) (["Declarator"] (["Pointer"]) (["Name" "insn_buf"])))) (["CompoundStatement"] (["DeclarationStatement"] (["SimpleDeclaration"] (["NamedTypeSpecifier"] (["Name" "u32"])) (["Declarator"] (["Name" "elem_size"]) (["EqualsInitializer"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "round_up"])) (["FieldReference" "problem-type"] (["IdExpression" "bpf_map *"] (["Name" "map"])) (["Name" "value_size"])) (["LiteralExpression" "int"])))))) (["DeclarationStatement"] (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_insn"])) (["Declarator"] (["Pointer"]) (["Name" "insn"]) (["EqualsInitializer"] (["IdExpression" "bpf_insn *"] (["Name" "insn_buf"])))))) (["DeclarationStatement"] (["SimpleDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Name" "ret"]) (["EqualsInitializer"] (["IdExpression" "problem-type"] (["Name" "BPF_REG_0"])))))) (["DeclarationStatement"] (["SimpleDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Name" "map_ptr"]) (["EqualsInitializer"] (["IdExpression" "problem-type"] (["Name" "BPF_REG_1"])))))) (["DeclarationStatement"] (["SimpleDeclaration"] (["SimpleDeclSpecifier"]) (["Declarator"] (["Name" "index"]) (["EqualsInitializer"] (["IdExpression" "problem-type"] (["Name" "BPF_REG_2"])))))) (["ProblemStatement"] (["Problem"])) (["ExpressionStatement"] (["BinaryExpression" "problem-binding" :assign] (["UnaryExpression" "bpf_insn" :star] (["UnaryExpression" "bpf_insn *" :postFixIncr] (["IdExpression" "bpf_insn *"] (["Name" "insn"])))) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "BPF_LDX_MEM"])) (["IdExpression" "problem-type"] (["Name" "BPF_W"])) (["IdExpression" "const int"] (["Name" "ret"])) (["IdExpression" "const int"] (["Name" "index"])) (["LiteralExpression" "int"])))) (["ExpressionStatement"] (["BinaryExpression" "problem-binding" :assign] (["UnaryExpression" "bpf_insn" :star] (["UnaryExpression" "bpf_insn *" :postFixIncr] (["IdExpression" "bpf_insn *"] (["Name" "insn"])))) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "BPF_JMP_IMM"])) (["IdExpression" "problem-type"] (["Name" "BPF_JGE"])) (["IdExpression" "const int"] (["Name" "ret"])) (["FieldReference" "problem-type"] (["IdExpression" "bpf_map *"] (["Name" "map"])) (["Name" "max_entries"])) (["LiteralExpression" "int"])))) (["IfStatement"] (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "is_power_of_2"])) (["IdExpression" "problem-type"] (["Name" "elem_size"]))) (["ExpressionStatement"] (["BinaryExpression" "problem-binding" :assign] (["UnaryExpression" "bpf_insn" :star] (["UnaryExpression" "bpf_insn *" :postFixIncr] (["IdExpression" "bpf_insn *"] (["Name" "insn"])))) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "BPF_ALU64_IMM"])) (["IdExpression" "problem-type"] (["Name" "BPF_LSH"])) (["IdExpression" "const int"] (["Name" "ret"])) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "ilog2"])) (["IdExpression" "problem-type"] (["Name" "elem_size"])))))) (["ExpressionStatement"] (["BinaryExpression" "problem-binding" :assign] (["UnaryExpression" "bpf_insn" :star] (["UnaryExpression" "bpf_insn *" :postFixIncr] (["IdExpression" "bpf_insn *"] (["Name" "insn"])))) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "BPF_ALU64_IMM"])) (["IdExpression" "problem-type"] (["Name" "BPF_MUL"])) (["IdExpression" "const int"] (["Name" "ret"])) (["IdExpression" "problem-type"] (["Name" "elem_size"])))))) (["ExpressionStatement"] (["BinaryExpression" "problem-binding" :assign] (["UnaryExpression" "bpf_insn" :star] (["UnaryExpression" "bpf_insn *" :postFixIncr] (["IdExpression" "bpf_insn *"] (["Name" "insn"])))) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "BPF_ALU64_REG"])) (["IdExpression" "problem-type"] (["Name" "BPF_ADD"])) (["IdExpression" "const int"] (["Name" "ret"])) (["IdExpression" "const int"] (["Name" "map_ptr"]))))) (["ExpressionStatement"] (["BinaryExpression" "problem-binding" :assign] (["UnaryExpression" "bpf_insn" :star] (["UnaryExpression" "bpf_insn *" :postFixIncr] (["IdExpression" "bpf_insn *"] (["Name" "insn"])))) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "BPF_LDX_MEM"])) (["IdExpression" "problem-type"] (["Name" "BPF_DW"])) (["IdExpression" "const int"] (["Name" "ret"])) (["IdExpression" "const int"] (["Name" "ret"])) (["LiteralExpression" "int"])))) (["ExpressionStatement"] (["BinaryExpression" "problem-binding" :assign] (["UnaryExpression" "bpf_insn" :star] (["UnaryExpression" "bpf_insn *" :postFixIncr] (["IdExpression" "bpf_insn *"] (["Name" "insn"])))) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "BPF_JMP_IMM"])) (["IdExpression" "problem-type"] (["Name" "BPF_JEQ"])) (["IdExpression" "const int"] (["Name" "ret"])) (["LiteralExpression" "int"]) (["LiteralExpression" "int"])))) (["ExpressionStatement"] (["BinaryExpression" "problem-binding" :assign] (["UnaryExpression" "bpf_insn" :star] (["UnaryExpression" "bpf_insn *" :postFixIncr] (["IdExpression" "bpf_insn *"] (["Name" "insn"])))) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "BPF_JMP_IMM"])) (["IdExpression" "problem-type"] (["Name" "BPF_JA"])) (["LiteralExpression" "int"]) (["LiteralExpression" "int"]) (["LiteralExpression" "int"])))) (["ExpressionStatement"] (["BinaryExpression" "problem-binding" :assign] (["UnaryExpression" "bpf_insn" :star] (["UnaryExpression" "bpf_insn *" :postFixIncr] (["IdExpression" "bpf_insn *"] (["Name" "insn"])))) (["FunctionCallExpression" "problem-binding"] (["IdExpression" "problem-type"] (["Name" "BPF_MOV64_IMM"])) (["IdExpression" "const int"] (["Name" "ret"])) (["LiteralExpression" "int"])))) (["ReturnStatement"] (["BinaryExpression" "long int" :minus] (["IdExpression" "bpf_insn *"] (["Name" "insn"])) (["IdExpression" "bpf_insn *"] (["Name" "insn_buf"])))))) (["SimpleDeclaration"] (["ElaboratedTypeSpecifier"] (["Name" "bpf_map_ops"])) (["Declarator"] (["Name" "array_of_maps_map_ops"]) (["EqualsInitializer"] (["InitializerList"] (["DesignatedInitializer"] (["Name" "map_alloc"]) (["IdExpression" "bpf_map * (bpf_attr *)"] (["Name" "array_of_map_alloc"]))) (["DesignatedInitializer"] (["Name" "map_free"]) (["IdExpression" "void (bpf_map *)"] (["Name" "array_of_map_free"]))) (["DesignatedInitializer"] (["Name" "map_get_next_key"]) (["IdExpression" "int (bpf_map *, void *, void *)"] (["Name" "array_map_get_next_key"]))) (["DesignatedInitializer"] (["Name" "map_lookup_elem"]) (["IdExpression" "void * (bpf_map *, void *)"] (["Name" "array_of_map_lookup_elem"]))) (["DesignatedInitializer"] (["Name" "map_delete_elem"]) (["IdExpression" "int (bpf_map *, void *)"] (["Name" "fd_array_map_delete_elem"]))) (["DesignatedInitializer"] (["Name" "map_fd_get_ptr"]) (["IdExpression" "problem-type"] (["Name" "bpf_map_fd_get_ptr"]))) (["DesignatedInitializer"] (["Name" "map_fd_put_ptr"]) (["IdExpression" "problem-type"] (["Name" "bpf_map_fd_put_ptr"]))) (["DesignatedInitializer"] (["Name" "map_fd_sys_lookup_elem"]) (["IdExpression" "problem-type"] (["Name" "bpf_map_fd_sys_lookup_elem"]))) (["DesignatedInitializer"] (["Name" "map_gen_lookup"]) (["IdExpression" "? (bpf_map *, bpf_insn *)"] (["Name" "array_of_map_gen_lookup"]))))))))